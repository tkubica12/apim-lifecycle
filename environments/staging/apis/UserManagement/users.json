{
  "openapi": "3.0.3",
  "info": {
    "title": "Users API",
    "version": "1.0.0",
    "description": "API for managing users, including creating, retrieving, updating, and deleting user records."
  },
  "paths": {
    "/": {
      "get": {
        "summary": "List all users",
        "description": "Retrieve a list of all users.",
        "responses": {
          "200": {
            "description": "A list of users.",
            "content": {
              "application/json": {
                "example": [
                  {
                    "id": "123",
                    "username": "jdoe",
                    "name": "John Doe",
                    "address": "123 Main St",
                    "email": "jdoe@example.com"
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "description": "Create a new user with provided details.",
        "requestBody": {
          "description": "User object to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/NewUser" },
              "example": {
                "username": "jdoe",
                "name": "John Doe",
                "address": "123 Main St",
                "email": "jdoe@example.com"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully.",
            "content": {
              "application/json": {
                "example": {
                  "id": "123",
                  "username": "jdoe",
                  "name": "John Doe",
                  "address": "123 Main St",
                  "email": "jdoe@example.com"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input provided."
          }
        }
      }
    },
    "/{id}": {
      "get": {
        "summary": "Get user by ID",
        "description": "Retrieve a specific user by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details retrieved successfully.",
            "content": {
              "application/json": {
                "example": {
                  "id": "123",
                  "username": "jdoe",
                  "name": "John Doe",
                  "address": "123 Main St",
                  "email": "jdoe@example.com"
                }
              }
            }
          },
          "404": {
            "description": "User not found."
          }
        }
      },
      "put": {
        "summary": "Update user by ID",
        "description": "Update details of an existing user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user object",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateUser" },
              "example": {
                "username": "jdoe",
                "name": "John Doe Updated",
                "address": "456 Elm St",
                "email": "jdoe_updated@example.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully.",
            "content": {
              "application/json": {
                "example": {
                  "id": "123",
                  "username": "jdoe",
                  "name": "John Doe Updated",
                  "address": "456 Elm St",
                  "email": "jdoe_updated@example.com"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input provided."
          },
          "404": {
            "description": "User not found."
          }
        }
      },
      "delete": {
        "summary": "Delete user by ID",
        "description": "Delete a user by their ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "NewUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username of the user."
          },
          "name": {
            "type": "string",
            "description": "Full name of the user."
          },
          "address": {
            "type": "string",
            "description": "Address of the user."
          },
          "email": {
            "type": "string",
            "description": "Email address of the user."
          }
        },
        "required": ["username", "name", "address", "email"]
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username of the user."
          },
          "name": {
            "type": "integer",
            "description": "Full name of the user."
          },
          "address": {
            "type": "string",
            "description": "Address of the user."
          },
          "email": {
            "type": "string",
            "description": "Email address of the user."
          }
        }
      }
    }
  }
}
